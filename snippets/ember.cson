# Ember Functions snippets
#
# Examples
#
#  `ember<tab>`
#

'.source.js, .source.ts':
  'run(() => { ... })':
    'prefix': 'run'
    'leftLabel': 'Ember'
    'body':"""
      run(() => {
      \t${1}
      });
    """
  #
  #
  # Ember Object Snippets
  #
  'super(...)':
    'prefix': 'super'
    'leftLabel': 'ES Class'
    'body': 'super(...arguments);'

  '@service(...)':
    'prefix': '@service'
    'leftLabel': 'Ember'
    'body': '@service() ${1};'

  #
  #
  # runloop
  #
  'bind(...)':
    'prefix': 'bind'
    'leftLabel': 'Ember'
    'body': "bind(${1:this}, ${2:this.methodName});"

  'cancel(...)':
    'prefix': 'cancel'
    'leftLabel': 'Ember'
    'body': "cancel('${1:key}');"

  'debounce(...)':
    'prefix': 'debounce'
    'leftLabel': 'Ember'
    'body': "debounce(${1:this}, '${2:methodName}', ${3:500});"

  'later(...)':
    'prefix': 'later'
    'leftLabel': 'Ember'
    'body': "later(${1:this}, () => { ${2}\\}, ${3:500});"

  'next(...)':
    'prefix': 'next'
    'leftLabel': 'Ember'
    'body': "next(${1:this}, () => { ${2}\\});"

  'once(...)':
    'prefix': 'once'
    'leftLabel': 'Ember'
    'body': "once(${1:this}, () => { ${2}\\});"

  'run(...)':
    'prefix': 'run'
    'leftLabel': 'Ember'
    'body': "run(() => { ${1}\\});"

  'schedule(...)':
    'prefix': 'schedule'
    'leftLabel': 'Ember'
    'body': "schedule('${1:queue}', ${2:this}, () => { ${3}\\}, );"

  'scheduleOnce(...)':
    'prefix': 'scheduleOnce'
    'leftLabel': 'Ember'
    'body': "scheduleOnce('${1:queue}', ${2:this}, () => { ${3}\\}, );"

  'throttle(...)':
    'prefix': 'throttle'
    'leftLabel': 'Ember'
    'body': "throttle(${1:this}, '${2:methodName}', ${3:500});"


  #
  #
  # Route Snippets
  #
  'Route: model(...) { ... }':
    'prefix': 'model'
    'leftLabel': 'Ember'
    'body': """
      model(params = {}) {
      \treturn this.store.query('${1}', params);
      },
    """

  'Route: setupController(...) { ... }':
    'prefix': 'setupController'
    'leftLabel': 'Ember'
    'body':"""
      setupController(controller, model) {
      \tthis._super(controller, model);
      \t${1}
      },

    """

  'Route: beforeModel(...) { ... }':
    'prefix': 'beforeModel'
    'leftLabel': 'Ember'
    'body':"""
      beforeModel(transition) {
      \tthis._super(controller, model);
      \t${1}
      },

    """

  'Route: afterModel(...) { ... }':
    'prefix': 'afterModel'
    'leftLabel': 'Ember'
    'body':"""
      afterModel(model, transition) {
      \tthis._super(controller, model);
      \t${1}
      },

    """

  #
  #
  # Component Snippets
  #
  'Component: didReceiveAttrs() { ... }':
    'prefix': 'didReceiveAttrs'
    'leftLabel': 'Ember'
    'body':"""
      didReceiveAttrs() {
      \tthis._super(...arguments);
      \t${1}
      },

    """

  'Component: didRender() { ... }':
    'prefix': 'didRender'
    'leftLabel': 'Ember'
    'body':"""
      didRender() {
      \tthis._super(...arguments);
      \t${1}
      },
    """

  'Component: didUpdateAttrs() { ... }':
    'prefix': 'didUpdateAttrs'
    'leftLabel': 'Ember'
    'body':"""
      didUpdateAttrs() {
      \tthis._super(...arguments);
      \t${1}
      },
    """

  'Component: willUpdate() { ... }':
    'prefix': 'willUpdate'
    'leftLabel': 'Ember'
    'body':"""
      willUpdate() {
      \tthis._super(...arguments);
      \t${1}
      },
    """

  'Component: didInsertElement() { ... }':
    'prefix': 'didInsertElement'
    'leftLabel': 'Ember'
    'body':"""
      didInsertElement() {
      \tthis._super(...arguments);
      \t${1}
      },
    """

  'Component: willDestroyElement() { ... }':
    'prefix': 'willDestroyElement'
    'leftLabel': 'Ember'
    'body':"""
      willDestroyElement() {
      \tthis._super(...arguments);
      \t${1}
      },
    """

  'Component: willClearElement() { ... }':
    'prefix': 'willClearElement'
    'leftLabel': 'Ember'
    'body':"""
      willClearElement() {
      \tthis._super(...arguments);
      \t${1}
      },
    """

  'Component: didDestroyElement() { ... }':
    'prefix': 'didDestroyElement'
    'leftLabel': 'Ember'
    'body':"""
      didDestroyElement() {
      \tthis._super(...arguments);
      \t${1}
      },
    """

  #
  #
  # Enumerables
  #
  '.filterBy(...)':
    'prefix': 'filterBy'
    'leftLabel': 'Ember Enumerable'
    'body': "${1:enumerable}.filterBy('${2:property}', ${3:value});"

  '.mapBy(...)':
    'prefix': 'mapBy'
    'leftLabel': 'Ember Enumerable'
    'body': "${1:enumerable}.mapBy('${2:property}');"

  '.every(...)':
    'prefix': 'every'
    'leftLabel': 'Ember Enumerable'
    'body': """
      ${1:enumerable}.every(function(${2:item}) {
      \t${3}
      });
    """

  '.isEvery(...)':
    'prefix': 'is-every'
    'leftLabel': 'Ember Enumerable'
    'body': "${1:enumerable}.isEvery('${2:property}', ${3:bool});"

  '.some(...)':
    'prefix': 'some'
    'leftLabel': 'Ember Enumerable'
    'body': """
      ${1:enumerable}.some(function(${2:item}) {
      \t${3}
      });
    """

  '.isAny(...)':
    'prefix': 'is-any'
    'leftLabel': 'Ember Enumerable'
    'body': "${1:enumerable}.isAny('${2:property}', ${3:bool});"

  '.toArray(...)':
    'prefix': 'to-array'
    'leftLabel': 'Ember Enumerable'
    'body': '${1:enumerable}.toArray();'

  '.get(\'firstObject\')':
    'prefix': 'first-object'
    'leftLabel': 'Ember Enumerable'
    'body': "${1:enumerable}.get('firstObject');"

  '.get(\'lastObject\')':
    'prefix': 'last-object'
    'leftLabel': 'Ember Enumerable'
    'body': "${1:enumerable}.get('lastObject');"
